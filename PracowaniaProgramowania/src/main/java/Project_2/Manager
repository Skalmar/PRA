package Project_2;
import Project_2.model.Employees;
import Project_2.model.Projects;
import Project_2.model.PersonalInfo;
import Project_2.queries.Queries;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
public class Manager {
    public static void main(String[] args) {

        System.out.println("Start");

        EntityManager entityManager = null;

        EntityManagerFactory entityManagerFactory = null;

        try {

            entityManagerFactory = Persistence.createEntityManagerFactory("hibernate-dynamic");

            entityManager = entityManagerFactory.createEntityManager();

            entityManager.getTransaction().begin();

            Employees employee = new Employees();
            employee.setFirstName("Edyta");
            employee.setLastName("Przybysz" + new Random().nextInt());
            employee.setSalary(1000);
            employee.setPesel(new Random().nextInt());

            Employees employee2 = new Employees();
            employee2.setFirstName("Maya");
            employee2.setLastName("Gordon" + new Random().nextInt());
            employee2.setSalary(1000);
            employee2.setPesel(new Random().nextInt());

            Projects project = new Projects();
            project.setName("Self-development");
            ZoneId zoneId = ZoneId.of("UTC+1");
            ZonedDateTime zonedDateTime2a = ZonedDateTime.of(2015, 6, 30, 23, 45, 59, 1234, zoneId);
            project.setStart_date(zonedDateTime2a);
            ZonedDateTime zonedDateTime2 = ZonedDateTime.of(2015, 11, 30, 23, 45, 59, 1234, zoneId);
            project.setAnticipated_end_date(zonedDateTime2);

            Projects project2 = new Projects();
            project2.setName("E-learning");
            ZonedDateTime zonedDateTime3a = ZonedDateTime.of(2017, 10, 10, 8, 45, 59, 1234, zoneId);
            project2.setStart_date(zonedDateTime3a);
            ZonedDateTime zonedDateTime3 = ZonedDateTime.of(2017, 11, 28, 15, 0, 0, 0, zoneId);
            project2.setAnticipated_end_date(zonedDateTime3);

            PersonalInfo personalInfo = new PersonalInfo();
            personalInfo.setLanguages("polish");
            personalInfo.setJobPost("HR manager");
            personalInfo.setPhoneNumber("+48 662 345 234");
            personalInfo.setYearsOfExperience(5);

            PersonalInfo personalInfo2 = new PersonalInfo();
            personalInfo2.setLanguages("english");
            personalInfo2.setJobPost("Personal assistant");
            personalInfo2.setPhoneNumber("+44 612 315 034");
            personalInfo2.setYearsOfExperience(2);

            employee.setProject(project);
            employee2.setProject(project2);
            employee.setPersonalInfo(personalInfo);
            employee2.setPersonalInfo(personalInfo2);
            employee.getSubworkers().add(employee2);

            entityManager.persist(project);
            entityManager.persist(personalInfo);
            entityManager.persist(employee);

            entityManager.persist(employee2);
            entityManager.persist(project2);
            entityManager.persist(personalInfo2);

            Employees employees = entityManager.find(Employees.class, employee.getId());
            if (employees == null) {
                System.out.println(employee.getId() + " not found! ");
            } else {
                System.out.println("Found " + employees);
            }

            System.out.println("Employee " + employees.getId() + " " + employees.getFirstName() + employees.getLastName());

            entityManager.getTransaction().commit();

            System.out.println("Done");

            entityManager.close();

        } catch (Throwable ex) {
            System.err.println("Initial SessionFactory creation failed." + ex);
        } finally {
            entityManagerFactory.close();
        }

    }

}
